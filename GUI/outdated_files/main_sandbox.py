# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ringtail_init.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os
import sys
import util as u
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import (
    QApplication,
    QHBoxLayout,
    QVBoxLayout,
    QPushButton,
    QWidget,
    QLabel,
    QFrame,
)
import logging
from PyQt6.QtCore import QObject, pyqtSignal, QThread
from PyQt6.QtWidgets import QFileDialog, QMainWindow
import sqlite3
from PyQt6.QtCore import pyqtSlot


from ringtail import RingtailCore, RaccoonLogger
import resources_rc

from file_browser import FileBrowser


# from PyQt5.QtCore import *
# from PyQt5.QtGui import *


ringtail_gui_path = os.path.realpath(os.path.dirname(__file__))
sys.path.append(ringtail_gui_path)


class Ui_MainWindow(object):

    def __init__(self):
        self.files = None
        self.filelists = None
        self.directories = None
        self.num_files = 0
        self.num_filelists = 0
        self.num_directories = 0
        self.logger = RaccoonLogger(log_level_console="ERROR")

    def setupUi(self, MainWindow: QMainWindow):
        # this object is handed a main window class
        MainWindow.setObjectName("MainWindow")
        # MainWindow.resize(900, 800)
        # central widget is the central widget

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        # I probahly have to set up a layout inside the central widget

        # then, all these settings should go in their own widget
        # a ringtail init widget
        self.initwidget = QtWidgets.QWidget()
        self.initwidget.setObjectName("initwidget")
        self.initwidget.setFixedSize(1000, 250)
        # vertical layout of the main window
        self.vlayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.vlayout.setObjectName("vlayout")

        # need new widget input stuff
        self.inputwidget = QtWidgets.QWidget()
        self.inputwidget.setObjectName("inputwidget")
        self.inputwidget.setFixedSize(1000, 150)
        self.inputwidget.setStyleSheet("border:1px solid rgb(0, 0, 0); ")

        # displays of numbe of selected files and their labels
        self.num_of_files_display = QtWidgets.QTextBrowser(self.inputwidget)
        self.num_of_files_display.setGeometry(QtCore.QRect(650, 10, 60, 30))
        self.num_of_files_display.setObjectName("num_of_files_display")
        self.num_of_files_label = QtWidgets.QLabel(self.inputwidget)
        self.num_of_files_label.setGeometry(QtCore.QRect(720, 10, 150, 30))
        self.num_of_files_label.setObjectName("num_of_files_label")

        self.num_of_filelists_display = QtWidgets.QTextBrowser(self.inputwidget)
        self.num_of_filelists_display.setGeometry(QtCore.QRect(650, 50, 60, 30))
        self.num_of_filelists_display.setObjectName("num_of_filelists_display")
        self.num_of_filelists_label = QtWidgets.QLabel(self.inputwidget)
        self.num_of_filelists_label.setGeometry(QtCore.QRect(720, 50, 150, 30))
        self.num_of_filelists_label.setObjectName("num_of_filelists_label")

        self.num_of_directories_display = QtWidgets.QTextBrowser(self.inputwidget)
        self.num_of_directories_display.setGeometry(QtCore.QRect(650, 90, 60, 30))
        self.num_of_directories_display.setObjectName("num_of_directories_display")
        self.num_of_directories_label = QtWidgets.QLabel(self.inputwidget)
        self.num_of_directories_label.setGeometry(QtCore.QRect(720, 90, 150, 30))
        self.num_of_directories_label.setObjectName("num_of_directories_label")
        # button to select files
        self.select_files_button = QtWidgets.QCommandLinkButton(self.inputwidget)
        self.select_files_button.setGeometry(QtCore.QRect(10, 10, 150, 40))
        self.select_files_button.setObjectName("select_files_button")
        self.select_files_button.clicked.connect(self.select_docking_result_files)
        self.select_files_button.setEnabled(False)
        # button to submit files to database
        self.submit_files_button = QtWidgets.QCommandLinkButton(self.inputwidget)
        self.submit_files_button.setGeometry(QtCore.QRect(10, 70, 150, 40))
        self.submit_files_button.setObjectName("submit_files_button")
        self.submit_files_button.clicked.connect(self.add_docking_results)
        self.submit_files_button.setEnabled(False)

        # settings to do with initializing ringtail core
        self.db_file = QtWidgets.QPlainTextEdit(self.initwidget)
        self.db_file.setGeometry(QtCore.QRect(20, 190, 121, 31))
        self.db_file.setObjectName("db_file")
        self.db_type_dropdown = QtWidgets.QComboBox(self.initwidget)
        self.db_type_dropdown.setGeometry(QtCore.QRect(20, 90, 81, 22))
        self.db_type_dropdown.setObjectName("db_type_dropdown")
        self.db_type_dropdown.addItem("")
        self.db_type_dropdown.addItem("")
        self.db_type_dropdown.addItem("")
        self.log_level_dropdown = QtWidgets.QComboBox(self.initwidget)
        self.log_level_dropdown.setGeometry(QtCore.QRect(20, 140, 81, 22))
        self.log_level_dropdown.setObjectName("log_level_dropdown")
        self.log_level_dropdown.addItem("")
        self.log_level_dropdown.addItem("")
        self.log_level_dropdown.addItem("")
        self.db_type_label = QtWidgets.QLabel(self.initwidget)
        self.db_type_label.setGeometry(QtCore.QRect(20, 70, 91, 16))
        self.db_type_label.setObjectName("db_type_label")
        self.log_level_label = QtWidgets.QLabel(self.initwidget)
        self.log_level_label.setGeometry(QtCore.QRect(20, 120, 91, 16))
        self.log_level_label.setObjectName("log_level_label")
        self.init_rt_core_button = QtWidgets.QCommandLinkButton(self.initwidget)
        self.init_rt_core_button.setGeometry(QtCore.QRect(150, 190, 168, 41))
        icon = QtGui.QIcon()
        icon.addPixmap(
            QtGui.QPixmap(":ringtail_head"),
            QtGui.QIcon.Mode.Normal,
            QtGui.QIcon.State.Off,
        )
        self.init_rt_core_button.setIcon(icon)
        self.init_rt_core_button.setObjectName("init_rt_core_button")
        self.init_rt_core_button.clicked.connect(self.pressed_init_rt_core)
        ### HERE
        self.adgpu_button = QtWidgets.QRadioButton(self.initwidget)
        self.adgpu_button.setGeometry(QtCore.QRect(20, 10, 150, 20))
        self.adgpu_button.setObjectName("adgpu_button")
        self.adgpu_button.setChecked(True)
        self.docking_mode_button_group = QtWidgets.QButtonGroup(MainWindow)
        self.docking_mode_button_group.setObjectName("docking_mode_button_group")
        self.docking_mode_button_group.addButton(self.adgpu_button)
        self.vina_button = QtWidgets.QRadioButton(self.initwidget)
        self.vina_button.setGeometry(QtCore.QRect(20, 40, 150, 20))
        self.vina_button.setObjectName("vina_button")
        self.docking_mode_button_group.addButton(self.vina_button)
        self.log_file = QtWidgets.QPlainTextEdit(self.initwidget)
        self.log_file.setGeometry(QtCore.QRect(110, 140, 191, 31))
        self.log_file.setPlainText("")
        self.log_file.setObjectName("log_file")
        self.log_file_label = QtWidgets.QLabel(self.initwidget)
        self.log_file_label.setGeometry(QtCore.QRect(110, 120, 191, 16))
        self.log_file_label.setObjectName("log_file_label")
        self.log_output_text_browser = QtWidgets.QTextBrowser(self.initwidget)
        self.log_output_text_browser.setGeometry(QtCore.QRect(330, 40, 650, 200))
        self.log_output_text_browser.setObjectName("log_output_text_browser")
        self.log_output_label = QtWidgets.QLabel(self.initwidget)
        self.log_output_label.setGeometry(QtCore.QRect(380, 10, 161, 16))
        self.log_output_label.setObjectName("log_output_label")
        # this is the end of the init widget

        MainWindow.setCentralWidget(self.centralwidget)

        self.vlayout.addWidget(self.initwidget)

        self.centralwidget.adjustSize()

        consoleHandler = ConsoleWindowLogHandler()
        consoleHandler.sigLog.connect(self.log_output_text_browser.append)
        self.logger.logger.addHandler(consoleHandler)

        self.databasewidget = QtWidgets.QWidget()
        self.databasewidget.setObjectName("databasewidget")
        self.databasewidget.setFixedSize(1000, 250)
        self.threadpool = QtCore.QThreadPool()
        self.tableWidget = QtWidgets.QTableWidget(self.databasewidget)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setGeometry(QtCore.QRect(200, 10, 800, 350))
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.db_table = QtWidgets.QPlainTextEdit(self.databasewidget)
        self.db_table.setGeometry(QtCore.QRect(10, 130, 170, 50))
        self.db_table.setObjectName("db_table")

        self.vlayout.addWidget(self.inputwidget)

        self.pushButton = QtWidgets.QPushButton(self.databasewidget)
        self.pushButton.setGeometry(QtCore.QRect(10, 40, 150, 50))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.databasewidget)
        self.pushButton_2.setGeometry(QtCore.QRect(10, 200, 150, 100))
        self.pushButton_2.setObjectName("pushButton_2")
        self.vlayout.addWidget(self.databasewidget)
        self.databasewidget.setFixedSize(1000, 400)
        self.projectName = ""
        self.pushButton.clicked.connect(self.openFile)
        self.pushButton_2.clicked.connect(self.workerStart)
        self.vlayout.addWidget(self.databasewidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def docking_mode(self):
        if self.adgpu_button.isChecked():
            return "dlg"
        elif self.vina_button.isChecked():
            return "vina"

    def file_pattern(self) -> str:
        if self.adgpu_button.isChecked():
            return "*.dlg*"
        elif self.vina_button.isChecked():
            return "*.pdbqt*"

    def pressed_init_rt_core(self):
        if len(self.log_file.toPlainText()) > 0:
            log_file = self.log_file.toPlainText()
        else:
            log_file = None

        self.rtc = RingtailCore(
            db_file=self.db_file.toPlainText(),
            storage_type=self.db_type_dropdown.currentText(),
            docking_mode=self.docking_mode(),
            logging_level=self.log_level_dropdown.currentText(),
            logging_file=log_file,
        )
        self.select_files_button.setEnabled(True)

    def openFile(self):
        projectName = QFileDialog.getOpenFileName(filter="Data (*.db)")
        print("File name: ", projectName[0])
        self.projectName = projectName[0]

    def workerStart(self):
        worker = Worker(self.loadDataBase)
        self.threadpool.start(worker)

    def loadDataBase(self):

        self.conn = sqlite3.connect(self.projectName)
        query = f"SELECT * FROM {self.db_table.toPlainText()}"
        cursor = self.conn.execute(query)
        row_len = []
        for i in cursor:
            row_len.append(len(i))
        self.col_num = max(row_len)
        self.tableWidget.setRowCount(0)
        self.tableWidget.setColumnCount(int(self.col_num))

        cursor = self.conn.execute(query)
        for row, row_data in enumerate(cursor):
            self.tableWidget.insertRow(row)
            for col, col_data in enumerate(row_data):
                self.tableWidget.setItem(
                    row, col, QtWidgets.QTableWidgetItem(str(col_data))
                )

        self.conn.close()

    def select_docking_result_files(self):
        # should open up a new window with file picking
        window = FileBrowser(self)
        window.show()

    def add_docking_results(self):
        self.rtc.add_results_from_files(
            file=u.QListWidget_to_list(self.files),
            file_path=u.QListWidget_to_list(self.directories),
            file_list=u.QListWidget_to_list(self.filelists),
        )
        self.files = None
        self.directories = None
        self.filelists = None

    # this is basically where all labels live so they can be translated to other languages, probably not necessary for now
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.db_file.setPlainText(_translate("MainWindow", "output.db"))
        self.db_type_dropdown.setItemText(0, _translate("MainWindow", "sqlite"))
        self.db_type_dropdown.setItemText(1, _translate("MainWindow", "sqlalchemy"))
        self.db_type_dropdown.setItemText(2, _translate("MainWindow", "postgres"))
        self.log_level_dropdown.setItemText(0, _translate("MainWindow", "warning"))
        self.log_level_dropdown.setItemText(1, _translate("MainWindow", "info"))
        self.log_level_dropdown.setItemText(2, _translate("MainWindow", "debug"))
        self.db_type_label.setText(_translate("MainWindow", "Database type"))
        self.log_level_label.setText(_translate("MainWindow", "Logging level"))
        self.num_of_files_label.setText(_translate("MainWindow", "files selected"))
        self.num_of_filelists_label.setText(
            _translate("MainWindow", "filelists selected")
        )
        self.num_of_directories_label.setText(
            _translate("MainWindow", "directories selected")
        )
        self.init_rt_core_button.setText(
            _translate("MainWindow", "Start your Ringtail Core")
        )
        self.adgpu_button.setText(_translate("MainWindow", "AutoDock GPU (dlg)"))
        self.select_files_button.setText(
            _translate("MainWindow", "Select results paths")
        )
        self.submit_files_button.setText(_translate("MainWindow", "Add results to db"))
        self.vina_button.setText(_translate("MainWindow", "vina (pdbqt)"))
        self.log_file_label.setText(
            _translate("MainWindow", "Logging file name (optional)")
        )
        self.log_output_label.setText(_translate("MainWindow", "Log messages"))
        self.pushButton.setText(_translate("MainWindow", "LOAD\ndatabase"))
        self.pushButton_2.setText(_translate("MainWindow", "SHOW\ndatabase\ntable"))


class ConsoleWindowLogHandler(logging.Handler, QObject):
    sigLog = pyqtSignal(str)

    def __init__(self):
        logging.Handler.__init__(self)
        QObject.__init__(self)

    def emit(self, logRecord):
        message = str(logRecord.getMessage())
        self.sigLog.emit(message)


class Popup(FileBrowser):
    def __init__(self):
        super().__init__(self)
        self.resize(800, 500)
        self.label = QLabel("File selector", self)


# visit www.pyshine.com for more details
class Worker(QtCore.QRunnable):

    def __init__(self, fnc, *args, **kwargs):
        super(Worker, self).__init__()
        self.fnc = fnc
        self.args = args
        self.kwargs = kwargs

    @pyqtSlot()
    def run(self):

        self.fnc(*self.args, **self.kwargs)


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    app.setWindowIcon(QtGui.QIcon(":ringtail_head"))
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
