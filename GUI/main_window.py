# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ringtail_init.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os
import sys
from PyQt5 import QtCore, QtGui, QtWidgets
from ringtail import RingtailCore
import resources_rc


ringtail_gui_path = os.path.realpath(os.path.dirname(__file__))
sys.path.append(ringtail_gui_path)


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(881, 777)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.db_file = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.db_file.setGeometry(QtCore.QRect(20, 190, 121, 31))
        self.db_file.setObjectName("db_file")
        self.db_type_dropdown = QtWidgets.QComboBox(self.centralwidget)
        self.db_type_dropdown.setGeometry(QtCore.QRect(20, 90, 81, 22))
        self.db_type_dropdown.setObjectName("db_type_dropdown")
        self.db_type_dropdown.addItem("")
        self.db_type_dropdown.addItem("")
        self.db_type_dropdown.addItem("")
        self.log_level_dropdown = QtWidgets.QComboBox(self.centralwidget)
        self.log_level_dropdown.setGeometry(QtCore.QRect(20, 140, 81, 22))
        self.log_level_dropdown.setObjectName("log_level_dropdown")
        self.log_level_dropdown.addItem("")
        self.log_level_dropdown.addItem("")
        self.log_level_dropdown.addItem("")
        self.db_type_label = QtWidgets.QLabel(self.centralwidget)
        self.db_type_label.setGeometry(QtCore.QRect(20, 70, 91, 16))
        self.db_type_label.setObjectName("db_type_label")
        self.log_level_label = QtWidgets.QLabel(self.centralwidget)
        self.log_level_label.setGeometry(QtCore.QRect(20, 120, 91, 16))
        self.log_level_label.setObjectName("log_level_label")
        self.init_rt_core_button = QtWidgets.QCommandLinkButton(self.centralwidget)
        self.init_rt_core_button.setGeometry(QtCore.QRect(150, 190, 168, 41))
        icon = QtGui.QIcon()
        icon.addPixmap(
            QtGui.QPixmap(":ringtail_head"),
            QtGui.QIcon.Normal,
            QtGui.QIcon.Off,
        )
        self.init_rt_core_button.setIcon(icon)
        self.init_rt_core_button.setObjectName("init_rt_core_button")
        self.init_rt_core_button.clicked.connect(self.pressed_init_rt_core)
        self.adgpu_button = QtWidgets.QRadioButton(self.centralwidget)
        self.adgpu_button.setGeometry(QtCore.QRect(20, 10, 151, 21))
        self.adgpu_button.setObjectName("adgpu_button")
        self.adgpu_button.setChecked(True)
        self.docking_mode_button_group = QtWidgets.QButtonGroup(MainWindow)
        self.docking_mode_button_group.setObjectName("docking_mode_button_group")
        self.docking_mode_button_group.addButton(self.adgpu_button)
        self.vina_button = QtWidgets.QRadioButton(self.centralwidget)
        self.vina_button.setGeometry(QtCore.QRect(20, 40, 91, 21))
        self.vina_button.setObjectName("vina_button")
        self.docking_mode_button_group.addButton(self.vina_button)
        self.log_file = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.log_file.setGeometry(QtCore.QRect(110, 140, 191, 31))
        self.log_file.setPlainText("")
        self.log_file.setObjectName("log_file")
        self.log_file_label = QtWidgets.QLabel(self.centralwidget)
        self.log_file_label.setGeometry(QtCore.QRect(110, 120, 191, 16))
        self.log_file_label.setObjectName("log_file_label")
        self.log_output_text_browser = QtWidgets.QTextBrowser(self.centralwidget)
        self.log_output_text_browser.setGeometry(QtCore.QRect(380, 40, 256, 192))
        self.log_output_text_browser.setObjectName("log_output_text_browser")
        self.log_output_label = QtWidgets.QLabel(self.centralwidget)
        self.log_output_label.setGeometry(QtCore.QRect(380, 10, 161, 16))
        self.log_output_label.setObjectName("log_output_label")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 881, 21))
        self.menubar.setObjectName("menubar")
        self.menuringtail = QtWidgets.QMenu(self.menubar)
        self.menuringtail.setObjectName("menuringtail")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menubar.addAction(self.menuringtail.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def docking_mode(self) -> str:
        if self.adgpu_button.isChecked():
            docking_mode = "dlg"
        elif self.vina_button.isChecked():
            docking_mode = "pdbqt"
        else:
            print("No docking mode selected, defaulting to dlg")
            docking_mode = "dlg"
        return docking_mode

    def pressed_init_rt_core(self) -> RingtailCore:
        if len(self.log_file.toPlainText()) > 0:
            log_file = self.log_file.toPlainText()
        else:
            log_file = None

        rtc = RingtailCore(
            db_file=self.db_file.toPlainText(),
            storage_type=self.db_type_dropdown.currentText(),
            docking_mode=self.docking_mode(),
            logging_level=self.log_level_dropdown.currentText(),
            logging_file=log_file,
        )
        print("Initialized Ringtail Core")
        return rtc

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.db_file.setPlainText(_translate("MainWindow", "output.db"))
        self.db_type_dropdown.setItemText(0, _translate("MainWindow", "sqlite"))
        self.db_type_dropdown.setItemText(1, _translate("MainWindow", "sqlalchemy"))
        self.db_type_dropdown.setItemText(2, _translate("MainWindow", "postgres"))
        self.log_level_dropdown.setItemText(0, _translate("MainWindow", "warning"))
        self.log_level_dropdown.setItemText(1, _translate("MainWindow", "info"))
        self.log_level_dropdown.setItemText(2, _translate("MainWindow", "debug"))
        self.db_type_label.setText(_translate("MainWindow", "Database type"))
        self.log_level_label.setText(_translate("MainWindow", "Logging level"))
        self.init_rt_core_button.setText(
            _translate("MainWindow", "Start your Ringtail Core")
        )
        self.adgpu_button.setText(_translate("MainWindow", "AutoDock GPU (dlg)"))
        self.vina_button.setText(_translate("MainWindow", "vina (pdbqt)"))
        self.log_file_label.setText(
            _translate("MainWindow", "Logging file name (optional)")
        )
        self.log_output_label.setText(_translate("MainWindow", "Log messages"))
        self.menuringtail.setTitle(_translate("MainWindow", "ringtail"))


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    app.setWindowIcon(QtGui.QIcon(":ringtail_head"))
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
